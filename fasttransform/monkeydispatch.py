# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_monkey_dispatch.ipynb.

# %% auto 0
__all__ = ['monkeydispatch', 'MonkeyDispatcher']

# %% ../nbs/03_monkey_dispatch.ipynb 2
import typing
from plum.function import Function
from plum.dispatcher import Dispatcher
from plum.util import get_class

# %% ../nbs/03_monkey_dispatch.ipynb 19
def _has_self_arg(f) -> bool:
    try: return f.__code__.co_varnames[0] == 'self'
    except (AttributeError, IndexError): return False

# %% ../nbs/03_monkey_dispatch.ipynb 20
class MonkeyDispatcher(Dispatcher):    
    def __call__(self, f):
        nm = f.__name__
        if not _has_self_arg(f): return super().__call__(f)
        if cls:= typing.get_type_hints(f).get('self'):
            if cm := getattr(cls,nm,None):
                if type(cm) is Function: cm.dispatch(f)
                else: setattr(cls,nm, Function(cm).dispatch(cm).dispatch(f))
            else: setattr(cls,nm,Function(f).dispatch(f))
            return cls
        else:
            gc = get_class(f)  # __main__.A
            nc, nm = f.__qualname__.split(".") #A, encodes
            if nc in globals(): 
                _ = globals().pop(nc)  # being redefined anyway so can be deleted
                self.classes.get(gc,{}).pop(nm,None)
            return super().__call__(f)    

# %% ../nbs/03_monkey_dispatch.ipynb 38
monkeydispatch = MonkeyDispatcher()
